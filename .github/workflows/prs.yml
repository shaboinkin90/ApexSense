name: Build/release

on: 
  pull_request:
    branches: [main]

jobs:
  build-and-upload-macos:
    runs-on: [self-hosted, macOS, ARM64]

    steps:
      - name: Check out Git repositoy
        uses: actions/checkout@v4.1.1
        with:
          clean: true

      - name: Dump system configuration
        run: |
          echo "Displaying system information:"
          uname -a
          sw_vers

          echo "Brew config:"
          brew config

          echo "npm config:"
          npm version

          echo "Python3 config:"
          python3 -VV

          echo "Pyinstaller:"
          pyinstaller --version

          echo "platypus:"
          platypus --version

      - name: Install Node Modules
        run: npm install

      - name: Build Python binary with Pyinstaller
        run: pyinstaller --onefile src/processing/garmin_video_processing.py --distpath=./packaging/python-binary/dist/darwin/arm64 --workpath=./packaging/python-binary/build/darwin/arm64/

      - name: macOS Pyinstaller Make Executable
        run: chmod +x ./packaging/python-binary/dist/darwin/arm64/garmin_video_processing

      - name: Make Electron Package
        run: npm run make

      - name: Upload macOS dmg Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ApexSense-macOS-ARM64.dmg
          path: out/make/ApexSense.dmg
          compression-level: 0

      - name: Create ApexSense Dev Mode Platypus app
        run: platypus -a "ApexSense Dev Mode" -o 'Text Window' -i ./assets/icons/icon.icns -u "Daniel Kulas" -V "1.0.0" -I com.kulas.ApexSense.devmode -y -l ./setup.zsh ./packaging/ApexSense\ Dev\ Mode.app

      - name: Sign ApexSense Dev Mode.app
        env:
          MAC_SIGNING_IDENTITY: ${{ secrets.MAC_SIGNING_IDENTITY }}
        run: codesign --sign "$MAC_SIGNING_IDENTITY" --verbose --force --timestamp ./packaging/ApexSense\ Dev\ Mode.app
        
      - name: Zip ApexSense Dev Mode.app
        run: |
          cd ./packaging
          zip -r ApexSense-Dev-Mode.zip ApexSense\ Dev\ Mode.app

      - name: Upload ApexSense Dev Mode Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ApexSense Dev Mode.zip
          path: ./packaging/ApexSense\ Dev\ Mode.zip

  build-and-upload-windows:
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Check out Git repositoy
        uses: actions/checkout@v4.1.1
        with:
          clean: true
          
      - name: Install Node Modules
        run: npm install

      - name: Build Python binary with Pyinstaller
        run: pyinstaller --onefile src/processing/garmin_video_processing.py --distpath=./packaging/python-binary/dist/win32/x64 --workpath=./packaging/python-binary/build/win32/x64/
        
      - name: Make Electron Package
        run: npm run make
    
      - name: Upload Windows exe Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ApexSense-Win-x64.exe
          path: out/make/squirrel.windows/x64/ApexSenseSetup.exe
          compression-level: 0
